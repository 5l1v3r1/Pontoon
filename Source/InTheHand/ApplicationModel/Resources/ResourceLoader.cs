//-----------------------------------------------------------------------
// <copyright file="ResourceLoader.cs" company="In The Hand Ltd">
//     Copyright © 2013-16 In The Hand Ltd. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
#if WINDOWS_UWP || WINDOWS_APP || WINDOWS_PHONE_APP
using System.Runtime.CompilerServices;
[assembly: TypeForwardedTo(typeof(Windows.ApplicationModel.Resources.ResourceLoader))]
#else

#if WINDOWS_PHONE
using System.Reflection;
using System.Resources;
using System.Windows;
#endif

namespace Windows.ApplicationModel.Resources
{
    /// <summary>
    /// Provides simplified access to app resources such as app UI strings.
    /// </summary>
    public sealed class ResourceLoader
    {
        private static ResourceLoader instance;

        /// <summary>
        /// Gets a ResourceLoader object for the Resources subtree of the currently running app's main ResourceMap. 
        /// This ResourceLoader uses a default context associated with the current view.
        /// </summary>
        /// <returns></returns>
        public static ResourceLoader GetForCurrentView()
        {
            if (instance == null)
            {
#if WINDOWS_PHONE
                // the trick is the logic to find the default resource set. this assumes using the Resources.AppResources generated by WP8 templates
                instance = new ResourceLoader(new ResourceManager(Deployment.Current.EntryPointType.Substring(0, Deployment.Current.EntryPointType.LastIndexOf('.')) + "Resources.AppResources", Assembly.Load(Deployment.Current.EntryPointAssembly)));
#endif
            }

            return instance;
        }

        /// <summary>
        /// Gets a ResourceLoader object for the Resources subtree of the currently running app's main ResourceMap.
        /// This ResourceLoader uses a default context that's not associated with any view.
        /// </summary>
        /// <returns></returns>
        public static ResourceLoader GetForViewIndependentUse()
        {
            return GetForCurrentView();
        }

        private ResourceManager resourceManager;

        private ResourceLoader(ResourceManager manager)
        {
            this.resourceManager = manager;
        }

        /// <summary>
        /// Returns the most appropriate string value of a resource, specified by resource identifier, for the default ResourceContext of the view in which the ResourceLoader was obtained using ResourceLoader.GetForCurrentView.
        /// </summary>
        /// <param name="resource">The resource identifier of the resource to be resolved.</param>
        /// <returns>The most appropriate string value of the specified resource for the default ResourceContext.</returns>
        public string GetString(string resource)
        {
            if(global::System.Threading.Thread.CurrentThread.CurrentCulture == null)
            {
                global::System.Threading.Thread.CurrentThread.CurrentCulture = global::System.Globalization.CultureInfo.DefaultThreadCurrentCulture;
            }

            return this.resourceManager.GetString(resource);
        }
    }
}
#endif